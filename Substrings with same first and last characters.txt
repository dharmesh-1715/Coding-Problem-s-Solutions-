//C++
class Solution {
  public:
    int countSubstring(string &s) {
        
        //Most Optimal Approach
        
        map<char,int> mp;
        int n=s.length();
        int count=0;
        
        for(int i=0;i<n;i++)
        {
            if(mp.find(s[i])!=mp.end())
            {
                count+=mp[s[i]];
            }
            mp[s[i]]++;
        }
        return n+count;
    }
};


//Java
class Solution {
    public int countSubstring(String s) {
        HashMap<Character, Integer> mp = new HashMap<>();
        int n = s.length();
        int count = 0;

        for (int i = 0; i < n; i++) {
            char ch = s.charAt(i);
            if (mp.containsKey(ch)) {
                count += mp.get(ch);
            }
            mp.put(ch, mp.getOrDefault(ch, 0) + 1);
        }

        return n + count;
    }
}