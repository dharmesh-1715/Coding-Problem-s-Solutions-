//C++ Code
class Solution {
  public:
    Node *rightmost(Node* curr)
    {
        Node* node=curr;
        while(node->right!=nullptr)
        {
            node=node->right;
        }
        return node;
    }
    
    Node *leftmost(Node* curr)
    {
        Node* node=curr;
        while(node->left!=nullptr)
        {
            node=node->left;
        }
        return node;
    }
    
    vector<Node*> findPreSuc(Node* root, int key) {
        Node* curr=root;
        Node* pre=nullptr;
        Node* suc=nullptr;
        
        while(curr!=nullptr)
        {
            if(curr->data < key)
            {
                pre=curr;
                curr=curr->right;
            }
            else if(curr->data > key)
            {
                suc=curr;
                curr=curr->left;
            }
            else
            {
                if(curr->left!=nullptr)
                {
                    pre=rightmost(curr->left);
                }
                if(curr->right!=nullptr)
                {
                    suc=leftmost(curr->right);
                }
                break;
            }
        }
        return {pre,suc};
    }
};


//Java Code
class Solution {
   static Node rightMost(Node node) {
        while (node.right != null) {
            node = node.right;
        }
        return node;
    }

    static Node leftMost(Node node) {
        while (node.left != null) {
            node = node.left;
        }
        return node;
    }

    
    static ArrayList<Node> findPreSuc(Node root, int key) {
        Node pre = null, suc = null;
        Node curr = root;

        while (curr != null) {
            if (curr.data < key) {
                pre = curr;
                curr = curr.right;
            } else if (curr.data > key) {
                suc = curr;
                curr = curr.left;
            } else {
                if (curr.left != null)
                    pre = rightMost(curr.left);
                if (curr.right != null)
                    suc = leftMost(curr.right);
                break;
            }
        }

        ArrayList<Node> result = new ArrayList<>();
        result.add(pre);
        result.add(suc);
        return result;
        
    }
}