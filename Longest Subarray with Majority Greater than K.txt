//C++ Code
class Solution {
  public:
    int longestSubarray(vector<int> &arr, int k) {
        //1. Array Transformation
        int n=arr.size();
        vector<int> vec;
        for(int i=0;i<n;i++)
        {
            if(arr[i]>k)vec.push_back(1);
            else vec.push_back(-1);
        }
        //2.Prefix sum and Hashmap
        map<int,int> mp;
        int sum=0;
        int maxi=0;
        mp[sum]=-1;
        
        for(int i=0;i<n;i++)
        {
            sum+=vec[i];
            if(sum>0)maxi=i+1;
            
            if(mp.find(sum-1)!=mp.end())
            {
                maxi=max(maxi,i-mp[sum-1]);
            }
            
            if(mp.find(sum)==mp.end())
            {
                mp[sum]=i;
            }
        }
        return maxi;
    }
};


//Java Code
class Solution {
    static int longestSubarray(int[] arr, int k) {
        // 1. Array Transformation
        int n = arr.length;
        int[] vec = new int[n];
        for (int i = 0; i < n; i++) {
            if (arr[i] > k) {
                vec[i] = 1;
            } else {
                vec[i] = -1;
            }
        }

        // 2. Prefix sum and HashMap
        Map<Integer, Integer> map = new HashMap<>();
        int sum = 0;
        int maxi = 0;
        map.put(0, -1);

        for (int i = 0; i < n; i++) {
            sum += vec[i];
            if (sum > 0) {
                maxi = i + 1;
            }

            if (map.containsKey(sum - 1)) {
                maxi = Math.max(maxi, i - map.get(sum - 1));
            }

            if (!map.containsKey(sum)) {
                map.put(sum, i);
            }
        }

        return maxi;
        
    }
}