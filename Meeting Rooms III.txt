//C++ Code

class Solution {
  public:
    int mostBooked(int n, vector<vector<int>> &meetings) {
        int len=meetings.size();
        vector<int> count(n,0);
        priority_queue<int,vector<int>,greater<int>> available;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> occupied;
        
        sort(meetings.begin(),meetings.end());
        
        for(int i=0;i<n;i++)
        {
            available.push(i);
        }
        
        for(int i=0;i<len;i++)
        {
            int start=meetings[i][0];
            int end=meetings[i][1];
            
            while(!occupied.empty() and occupied.top().first<=start)
            {
                int room=occupied.top().second;
                occupied.pop();
                available.push(room);
            }
            
            
            if(!available.empty())
            {
                int room=available.top();
                available.pop();
                occupied.push({end,room});
                count[room]++;
            }
            else
            {
                int endtime=occupied.top().first;
                int room=occupied.top().second;
                occupied.pop();
                occupied.push({endtime+(end-start),room});
                count[room]++;
            }
        }
        
        int res=count[0];
        int index=0;
        for(int i=0;i<count.size();i++)
        {
            if(count[i]>res)
            {
                index=i;
                res=count[i];
            }
        }
        return index;
    }
};


//Java Code
class Solution {
    public int mostBooked(int n, int[][] meetings) {
        // code here
        int[] cnt = new int[n];

        PriorityQueue<int[]> occ = new PriorityQueue<>(new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                if (a[0] != b[0]) return Integer.compare(a[0], b[0]);
                return Integer.compare(a[1], b[1]);
            }
        });

        PriorityQueue<Integer> avail = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            avail.offer(i);
        }

        Arrays.sort(meetings, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                if (a[0] != b[0]) return Integer.compare(a[0], b[0]);
                return Integer.compare(a[1], b[1]);
            }
        });

        for (int[] m : meetings) {
            int s = m[0];
            int e = m[1];

            while (!occ.isEmpty() && occ.peek()[0] <= s) {
                avail.offer(occ.poll()[1]);
            }

            if (!avail.isEmpty()) {
                int r = avail.poll();
                occ.offer(new int[] {e, r});
                cnt[r]++;
            } else {
                int[] earliest = occ.poll();
                int t = earliest[0];
                int r = earliest[1];
                occ.offer(new int[] {t + (e - s), r});
                cnt[r]++;
            }
        }

        int maxCnt = 0;
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (cnt[i] > maxCnt) {
                maxCnt = cnt[i];
                res = i;
            }
        }

        return res;
    }
}