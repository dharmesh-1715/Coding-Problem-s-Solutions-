#include <bits/stdc++.h>
class Solution {
  public:
    int findTarget(vector<int>& arr, int target) {
        //Linear Search Technique
        
        // for(int i=0;i<arr.size();i++)
        // {
        //     if(arr[i]==target)return i;//checking with each Element 
        // }
        // return -1;
        
        
        
        //By Sorting and Binary Search
        
        // map<int,int> mp;
        // for(int i=0;i<arr.size();i++)
        // {
        //     mp[arr[i]]=i;//Preserving the Original Indexes of elements
        // }
        
        // sort(arr.begin(),arr.end());//Sorting the array to Search
        // int low=0;
        // int high=arr.size()-1;
        // while(low<=high)//Typical template of binary search
        // {
        //     int mid=low+(high-low)/2;
        //     if(arr[mid]==target)
        //     {
        //         return mp[arr[mid]];//Only change is here as we are going the index from map
        //     }
        //     else if(arr[mid]>target)
        //     {
        //         high=mid-1;
        //     }
        //     else
        //     {
        //         low=mid+1;
        //     }
        // }
        // return -1;
        
        
        
        //Optimal Appraoch for this Problem 
        
        int low=0;
        int high=arr.size()-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(arr[mid]==target)
            {
                return mid;
            }
            else if(arr[mid+1]==target)//Modified Condition
            {
                return mid+1;
            }
            else if(arr[mid-1]==target)//modified condition
            {
                return mid-1;
            }
            else if(arr[mid]>target)
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return -1;
    }
};