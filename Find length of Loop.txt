// class Solution {
//   public:
//     // Function to find the length of a loop in the linked list.
//     int countNodesinLoop(Node *head) {
//         //Approach 1
        
//         map<Node*,int> mp;//for keeping track of each Node
//         Node* p=head;
//         int count=1;//Counter for each Node
//         while(p)
//         {
//             count++;
//             if(mp.find(p)!=mp.end())//if Found means its visited already so loop exits
//             {
//                 return (count-mp[p]); //simple math to count the loop elements
//             }
//             else
//             {
//                 mp[p]=count;//otherwise add with count
//             }
//             p=p->next;
//         }
//         return 0;//No loop present 
        
//     }
// };


class Solution {
  public:
    // Function to find the length of a loop in the linked list.
    int countNodesinLoop(Node *head) {
        //Approach 2
        //By using Tortoise and hare algorithm
        
        Node* slow=head;
        Node* fast=head;
        while(fast!=nullptr and fast->next!=nullptr)//typical tortoise and hare algorithm
        {
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast)break;//Loop is found
        }
        if(fast==nullptr or fast->next==nullptr)//checking for if no loop is found
        {
            return 0;
        }
        
        slow=slow->next;
        int count=1;
        while(slow!=fast)//move slow until we find the fast and keep counting
        {
            slow=slow->next;
            count++;
        }
        return count;
    }
};