//C++ code
class Solution {
  public:
  
    int count_banana(vector<int>& arr,int n)
    {
        int count=0;
        
        for(int i=0;i<arr.size();i++)
        {
            count=count + ceil((double)arr[i]/(double)n);
        }
        
        return count;
    }
    
    int kokoEat(vector<int>& arr, int k) {
        int low=1;
        int high=*max_element(arr.begin(),arr.end());

        while(low<=high)
        {
            int mid=(low+high)/2;
            
            if(count_banana(arr,mid)>k)
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return low;
    }
};

//Java Code
class Solution {
    public int count_banana(int[] arr,int n)
    {
        int count=0;
        
        for(int i=0;i<arr.length;i++)
        {
            count=count + (int)Math.ceil((double)arr[i]/n);
        }
        
        return count;
    }
    
    public int kokoEat(int[] arr, int k) {
        int low=1;
        int high=arr[0];
        
        for(int i=0;i<arr.length;i++)
        {
            high=Math.max(high,arr[i]);
        }

        while(low<=high)
        {
            int mid=(low+high)/2;
            
            if(count_banana(arr,mid)>k)
            {
                low=mid+1;
            }
            else
            {
                high=mid-1;
            }
        }
        return low;
    }
}
